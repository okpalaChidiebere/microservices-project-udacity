version: '3.7'

services:

  # Proxies requests to internal services
  reverseproxy:
    image: aluminetchidiebre/reverseproxy # goes to your repository on Docker Hub. This will make it easier to run 'docker-compse push' to push the images to our Dockerhub after logining in to our console
    container_name: reverseproxy
    build:
      context: ./reverse-proxy
    depends_on:
        - feed-service
        - user-service
    ports:
      - 8080:8080
    restart: always

  # generates FrontEnd
  udagram-frontend:
    image: aluminetchidiebre/udagram-frontend  # goes to your repository on Docker Hub
    container_name: udagram-frontend
    build:
      context: ./udagram-frontend
    ports:
      - 8100:80
    restart: on-failure

  # Retrieves the feed microservice
  user-service:
    image: aluminetchidiebre/user-service # goes to your repository on Docker Hub
    container_name: user-service
    build:
      context: ./udagram-api-user
    environment: #this variables will be set to the container during runtime. eg 'docker-compose --env-file ./docker/.env.dev up'  if i dont specify the flag, by default the docker-compose command will look for a file named .env in the directory you run the command. *remember to add the env file to gitignore
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} 
      POSTGRES_DATABASE: ${POSTGRES_DATABASE} 
      POSTGRES_HOST: ${POSTGRES_HOST}
      AWS_REGION: ${AWS_PROFILE}
      AWS_PROFILE: ${AWS_PROFILE} 
      AWS_MEDIA_BUCKET: ${AWS_MEDIA_BUCKET}
      JWT_SECRET: ${JWT_SECRET}
    restart: on-failure


  # Generates the user microservice
  feed-service:
    image: aluminetchidiebre/feed-service  # goes to your repository on Docker Hub
    container_name: feed-service
    volumes:
      - $HOME/.aws:/root/.aws
    build:
      context: ./udagram-api-feed
    environment:
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} 
      POSTGRES_DATABASE: ${POSTGRES_DATABASE} 
      POSTGRES_HOST: ${POSTGRES_HOST}
      AWS_REGION: ${AWS_PROFILE}
      AWS_PROFILE: ${AWS_PROFILE} 
      AWS_MEDIA_BUCKET: ${AWS_MEDIA_BUCKET}
      JWT_SECRET: ${JWT_SECRET}
    restart: on-failure
